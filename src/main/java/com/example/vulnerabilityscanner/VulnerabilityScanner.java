package com.example.vulnerabilityscanner;

import io.snyk.api.v1.SnykApi;
import io.snyk.api.v1.models.Project;
import io.snyk.api.v1.models.Vulnerability;

import java.util.List;

public class VulnerabilityScanner {

    public static String classifyVulnerability(VulnerabilityAttributes v) {
        if (!v.criticalServicesAffected) {
            return "low severity";
        } else if (v.criticalServicesAffected && (!v.clientsFinancialCounterpartsTransactions && !v.dataLoss && !v.reputationalImpact && !v.durationOfServiceDowntime && !v.geographicalSpread && !v.economicImpact)) {
            return "low severity";
        } else if (v.clientsFinancialCounterpartsTransactions && (!v.dataLoss && !v.reputationalImpact && !v.durationOfServiceDowntime && !v.geographicalSpread && !v.economicImpact)) {
            return "medium severity";
        } else if (v.criticalServicesAffected && (v.clientsFinancialCounterpartsTransactions || v.dataLoss || v.reputationalImpact || v.durationOfServiceDowntime || v.geographicalSpread || v.economicImpact)) {
            return "high severity";
        } else {
            return "critical severity";
        }
    }

    public static void main(String[] args) {
        String apiToken = "dein-api-token-hier";
        SnykApi snykApi = new SnykApi(apiToken);
        List<Project> projects = snykApi.projects().list();

        for (Project project : projects) {
            List<Vulnerability> vulnerabilities = snykApi.projects().getVulnerabilities(project.id);
            for (Vulnerability vulnerability : vulnerabilities) {
                VulnerabilityAttributes v = new VulnerabilityAttributes(
                        checkCriticalServicesAffected(vulnerability),
                        checkClientsFinancialCounterpartsTransactions(vulnerability),
                        checkDataLoss(vulnerability),
                        checkReputationalImpact(vulnerability),
                        checkDurationOfServiceDowntime(vulnerability),
                        checkGeographicalSpread(vulnerability),
                        checkEconomicImpact(vulnerability)
                );

                String severity = classifyVulnerability(v);
                System.out.println("Vulnerability ID: " + vulnerability.id + " Severity: " + severity);
            }
        }
    }

    private static boolean checkCriticalServicesAffected(Vulnerability vulnerability) {
        // Beispiel-Implementierung: Überprüfen, ob die Schwachstelle kritische Dienste betrifft
        return vulnerability.description.toLowerCase().contains("critical service");
    }

    private static boolean checkClientsFinancialCounterpartsTransactions(Vulnerability vulnerability) {
        // Beispiel-Implementierung: Überprüfen, ob die Schwachstelle Kunden, finanzielle Gegenparteien oder Transaktionen betrifft
        return vulnerability.description.toLowerCase().contains("financial") || vulnerability.description.toLowerCase().contains("client") || vulnerability.description.toLowerCase().contains("transaction");
    }

    private static boolean checkDataLoss(Vulnerability vulnerability) {
        // Beispiel-Implementierung: Überprüfen, ob die Schwachstelle zu Datenverlust führen könnte
        return vulnerability.description.toLowerCase().contains("data loss");
    }

    private static boolean checkReputationalImpact(Vulnerability vulnerability) {
        // Beispiel-Implementierung: Überprüfen, ob die Schwachstelle einen Rufschaden verursachen könnte
        return vulnerability.description.toLowerCase().contains("reputation");
    }

    private static boolean checkDurationOfServiceDowntime(Vulnerability vulnerability) {
        // Beispiel-Implementierung: Überprüfen, ob die Schwachstelle zu Ausfallzeiten des Dienstes führen könnte
        return vulnerability.description.toLowerCase().contains("downtime");
    }

    private static boolean checkGeographicalSpread(Vulnerability vulnerability) {
        // Beispiel-Implementierung: Überprüfen, ob die Schwachstelle eine geografische Ausbreitung haben könnte
        return vulnerability.description.toLowerCase().contains("geographical");
    }

    private static boolean checkEconomicImpact(Vulnerability vulnerability) {
        // Beispiel-Implementierung: Überprüfen, ob die Schwachstelle wirtschaftliche Auswirkungen haben könnte
        return vulnerability.description.toLowerCase().contains("economic");
    }
}
